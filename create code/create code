//0-15 seconds
int rmotor = //rightmotor speed variable (rmotor)
int lmotor = //leftmotor speed variable (lmotor)
int firewall = //firewalldistance variable (firewall)
void drive (int distance); //distance variable to use w encoders (distance)
void turn_right (int degrees); //turn right function
//alarmdistance (alarm)

int main () //start code
{ //whole code bracket
create_connect(); //create connection
wait_for_light(); //put in port number
//when the light gets turned on, the create starts
shut_down_in(120); //game time
while (get_create_lfcliff_amt()>1000) // create sees white
{
create_drive_direct (lmotor, rmotor);
msleep(10);
}
while (get_create_lfcliff_amt()<1000) // create sees black
{
create_drive_direct (0, 0);
msleep(100);
}
//move forward until black line (use cliff sensor)
//turn right 90 degrees
//move forward along black line, scooping up poms
//stop before the wireshark (certain distance)
//turn right 135 degrees
//move forward a little (10 cm maybe)
//move backwards (10 cm^^)
//turn left 135 degrees

//15-30 seconds
//close scoop
//raise scoop (high enough to reach below alarm switch)
//move to alarm (use variable “alarmdistance”)
//raise scoop to switch the alarm
//move backwards (“alarmdistance”)
//turn right 45 degrees
//lower scoop (able to pick up cube)
//open scoop (enough to pick up cube)
//move to red cube (firewalldistance)

//30-45 seconds
//close scoop
//move backwards (firewalldistance)
//turn right 135 degrees
//drive to external network connection (while following black line)
//open scoop

//45-60 seconds
//

//FUNCTIONS
void drive (int distance) //function for drive for an inputted number of cm
{
create_drive_direct (lmotor, rmotor);
msleep (distance);
create_stop();
}
void turn_right (int degrees) //function for turning right at and inputted angle in degrees
{
create_drive_direct (lmotor/2, rmotor/2);
msleep(degrees);
create_stop();
}
