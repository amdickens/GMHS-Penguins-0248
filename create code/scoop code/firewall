#include <kipr/wombat.h>

int rmotor = 200;              //right motor speed value that makes robot go straight
int lmotor = 208;              //left motor speed value that makes robot go straight
int open = 568;                //open scoop servo value, large enough to scoop all poms and grab firewall
int close = 1350;              //close scoop servo value, hits alarm
int secure = 1100;              //closed scoop servo value, grabs firewall
int up = 1630;                 //raised scoop value, high enough to reach alarm switch
int down = 670;                //lowered scoop value, almost touching ground
int armstart = 1150;           //starting servo position for arm
int poms = 25;                 //drop off pom distance in cm
int arm = 1;                   //arm servo port
int claw = 0;                  //claw servo port
int lift = 800;                //lift cube off ground value for servo
int firewall = 37.9;             //distance to grab firewall
void rturn (int degrees);      //turn right for inputted number of degrees
void lturn (int degrees);      //turn left for inputted number of degrees
void fdrive (int distance);    //drive forward for an inputted distance in cm
void bdrive (int distance);    //drive backward for an inputted distance in cm

int main()
{
create_connect();
enable_servos ();
set_servo_position (claw, open);      //open scoop
set_servo_position (arm, down);       //lower scoop
fdrive (firewall);                    //drive towards cube
msleep(500);
set_servo_position (claw, secure);    //close scoop to grab firewall
msleep(500);
bdrive (firewall);                    //drive backwards to the line
set_servo_position (arm, up);       //lift the firewall off the ground
rturn (130);                          //turns right 135 degrees to face external network connection
fdrive (150);                          //drives to external network connection
set_servo_position (arm, down);       //puts arm down
    msleep(500);
fdrive (20);                          //drives to external network connection
set_servo_position (claw, open);      //lets go of cube under connection
bdrive (20);                          //drives backward
disable_servos ();
create_stop();
create_disconnect();
return(0);
}

void rturn (int degrees)
{
create_drive_direct (lmotor, -rmotor);
msleep(degrees*10.5);                     
create_stop();
}

void lturn (int degrees)
{
create_drive_direct (-lmotor, rmotor);
msleep(degrees*10.5);                   
create_stop();
}

void fdrive (int distance)
{
create_drive_direct(lmotor, rmotor);
msleep(distance/19*1000);           
create_stop();
}

void bdrive (int distance)
{
create_drive_direct(-lmotor, -rmotor);
msleep(distance/19*1000);           
create_stop();
}
